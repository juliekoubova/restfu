name: dev
on:
  push:
  pull_request:
jobs:
  publish:
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 0
      DOTNET_NOLOGO: 1
    runs-on: [windows-latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # - name: Test
    #   env:
    #     MONGODB_URL: ${{ secrets.MONGODB_URL }}
    #   run: dotnet test

    - name: Build NuGet Packages
      id: pack
      shell: pwsh
      run: |

        $GithubRef = '${{ github.ref }}'

        $Props = @{
          RepositoryCommit = '${{ github.sha }}'
        }

        if ($GithubRef -match '^refs/heads/(.+)$') {
          $Props.RepositoryBranch = $matches[1]
          $Props.VersionSuffix = '{0}-{1:yyyy-MM-dd-HHmmss}-{2}' -f
            $matches[1],
            (Get-Date).ToUniversalTime(),
            $Props.RepositoryCommit.Substring(0, 7)
        } elseif ($GithubRef -match '^refs/tags/v(.+)$') {
          $Props.Version = $matches[1]

          "::set-output name=version::$($Props.Version)"

          if ($Props.Version -like '*-*') {
            "::set-output name=prerelease::true"
          }
        }

        $PackArgs = @(
          '--configuration', 'Release' #, '--no-restore'
        )

        foreach ($tuple in $Props.GetEnumerator()) {
          $PackArgs += "-p:$($tuple.Key)=$($tuple.Value)"
        }

        dotnet pack @PackArgs

        if (-not $?) {
          exit $LastExitCode
        }

        if ($Props.VersionSuffix) {
          $ZipSuffix = $Props.VersionSuffix
        } elseif ($Props.Version) {
          $ZipSuffix = 'v' + $Props.Version
        }

        $ZipFile = "restfu-${ZipSuffix}.zip"

        [System.IO.Compression.ZipFile]::CreateFromDirectory(
          (Resolve-Path "$Env:GITHUB_WORKSPACE\.nupkg"),
          $ZipFile
          'NoCompression',
          $false
        )

        "::set-output name=zip::$ZipFile"

    - name: Upload NuGet Packages to GitHub
      if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/v')
      shell: pwsh
      run: |
        Get-ChildItem $Env:GITHUB_WORKSPACE\.nupkg\*.nupkg |% {
          curl -sSX PUT `
            -u "juliekoubova:${{ secrets.GITHUB_TOKEN }}" `
            -F package=@$_ `
            https://nuget.pkg.github.com/juliekoubova/
        }

    - name: Create GitHub Release
      id: create_release
      if: steps.pack.outputs.version
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.pack.outputs.version }}
        draft: false
        prerelease: ${{ steps.pack.outputs.prerelease }}

    - name: Upload Packages to the GitHub Release
      if: steps.pack.outputs.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # shell: pwsh
      # run: write-host '${{ steps.create_release.outputs.upload_url }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.pack.outputs.zip }}
        asset_name: ${{ steps.pack.outputs.zip }}
        asset_content_type: application/zip

    # - name: Upload Packages to Nuget.org
    #   if: false && steps.pack.outputs.version
    #   shell: pwsh
    #   env:
    #     NUGET_KEY: ${{ secrets.NUGET_KEY }}
    #   run: |
    #     dotnet push $Env:GITHUB_WORKSPACE\.nupkg\*.nupkg -k $Env:NUGET_KEY
