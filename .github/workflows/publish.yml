name: dev
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 0
  DOTNET_NOLOGO: 1
on:
  push:
  pull_request:
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # - name: Test
    #   env:
    #     MONGODB_URL: ${{ secrets.MONGODB_URL }}
    #   run: dotnet test

    - name: Build NuGet Packages
      id: pack
      shell: pwsh
      env:

      run: |

        $Props = @{
        }

        if ($Env:GITHUB_REF -match '^refs/heads/(.+)$') {
          $Props.VersionSuffix = '{0}-{1:yyyy-MM-dd-HHmmss}-{2}' -f
            $matches[1],
            (Get-Date).ToUniversalTime(),
            $(git rev-parse --short $Env:GITHUB_SHA)
        } elseif ($Env:GITHUB_REF -match '^refs/tags/v(.+)$') {
          $Props.Version = $matches[1]

          "::set-output name=version::$($Props.Version)"

          if ($Props.Version -like '*-*') {
            "::set-output name=prerelease::true"
          }
        }

        $PackArgs = @(
          '--configuration', 'Release' #, '--no-restore'
        )

        foreach ($tuple in $Props.GetEnumerator()) {
          $PackArgs += "-p:$($tuple.Key)=$($tuple.Value)"
        }

        dotnet pack @PackArgs

        # if (-not $?) {
        #   exit $LastExitCode
        # }

        # if ($Props.VersionSuffix) {
        #   $ZipSuffix = $Props.VersionSuffix
        # } elseif ($Props.Version) {
        #   $ZipSuffix = 'v' + $Props.Version
        # }

        # $ZipFile = "restfu-${ZipSuffix}.zip"

        # [System.IO.Compression.ZipFile]::CreateFromDirectory(
        #   (Resolve-Path "$Env:GITHUB_WORKSPACE\.nupkg"),
        #   $ZipFile,
        #   'NoCompression',
        #   $false
        # )

        # "::set-output name=zip::$ZipFile"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: nupkg
        path: .nupkg

  # publish_github_package:
  #   if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #   - name: Upload Packages to the GitHub Release
  #     if: steps.pack.outputs.zip && steps.create_release.outputs.upload_url
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: ./${{ steps.pack.outputs.zip }}
  #       asset_name: ${{ steps.pack.outputs.zip }}
  #       asset_content_type: application/zip

  # publish:
  #   needs: build
  #   if: github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #   - name: Upload NuGet Packages to GitHub
  #     shell: pwsh
  #     run: |
  #       Get-ChildItem $Env:GITHUB_WORKSPACE\.nupkg\*.nupkg |% {
  #         curl -sSX PUT `
  #           -u "juliekoubova:${{ secrets.GITHUB_TOKEN }}" `
  #           -F package=@$_ `
  #           https://nuget.pkg.github.com/juliekoubova/
  #       }

  #   - name: Create GitHub Release
  #     id: create_release
  #     if: steps.pack.outputs.version
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: ${{ steps.pack.outputs.version }}
  #       draft: false
  #       prerelease: ${{ steps.pack.outputs.prerelease }}


  #   # - name: Upload Packages to Nuget.org
  #   #   if: false && steps.pack.outputs.version
  #   #   shell: pwsh
  #   #   env:
  #   #     NUGET_KEY: ${{ secrets.NUGET_KEY }}
  #   #   run: |
  #   #     dotnet push $Env:GITHUB_WORKSPACE\.nupkg\*.nupkg -k $Env:NUGET_KEY
